{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelectTodo","isTodoSelected","selectedTodoId","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","selectedOption","onSelectOption","query","onInputQuery","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","setIsTodoSelected","useState","user","setUser","getUserFromServer","a","undefined","userId","useEffect","href","email","name","App","setTodos","setSelectedOption","setQuery","setSelectedTodo","getTodosFromServer","allTodos","filter","toLowerCase","includes","newSelectedOption","newQuery","length","newSelectedTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e87b52cc.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onSelectTodo: (newSelectedTodo: Todo) => void,\n  isTodoSelected: boolean,\n  selectedTodoId: number | undefined,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, onSelectTodo, isTodoSelected, selectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  onSelectTodo(todo);\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames({\n                    'far fa-eye-slash':\n                      selectedTodoId === todo.id && isTodoSelected,\n                  }, {\n                    'far fa-eye':\n                      !(selectedTodoId === todo.id && isTodoSelected),\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  selectedOption: string,\n  onSelectOption: (newSelectedOption: string) => void,\n  query: string,\n  onInputQuery: (newQuery: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectedOption,\n  onSelectOption,\n  query,\n  onInputQuery,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={(event) => onSelectOption(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onInputQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onInputQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo | null,\n  isTodoSelected: boolean,\n  setIsTodoSelected: (newValue: boolean) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  isTodoSelected,\n  setIsTodoSelected,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const getUserFromServer = async () => {\n    if (selectedTodo?.userId === undefined) {\n      return;\n    }\n\n    setUser(await getUser(selectedTodo?.userId));\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  });\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(!user && isTodoSelected) && <Loader />}\n\n      {(user && isTodoSelected) && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setUser(null);\n                setIsTodoSelected(false);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedOption, setSelectedOption] = useState('all');\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isTodoSelected, setIsTodoSelected] = useState(false);\n\n  const getTodosFromServer = async () => {\n    let allTodos = await getTodos();\n\n    switch (selectedOption) {\n      case 'all':\n        break;\n\n      case 'active':\n        allTodos = allTodos.filter(todo => !todo.completed);\n        break;\n\n      case 'completed':\n        allTodos = allTodos.filter(todo => todo.completed);\n        break;\n\n      default:\n        break;\n    }\n\n    allTodos = allTodos.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n\n    setTodos(allTodos);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedOption={selectedOption}\n                onSelectOption={(newSelectedOption) => {\n                  setSelectedOption(newSelectedOption);\n                }}\n                query={query}\n                onInputQuery={(newQuery) => {\n                  setQuery(newQuery);\n                }}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length && !query\n                ? (\n                  <Loader />\n                ) : (\n                  <TodoList\n                    todos={todos}\n                    onSelectTodo={(newSelectedTodo) => {\n                      setSelectedTodo(newSelectedTodo);\n                      setIsTodoSelected(true);\n                    }}\n                    isTodoSelected={isTodoSelected}\n                    selectedTodoId={selectedTodo?.id}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isTodoSelected && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          isTodoSelected={isTodoSelected}\n          setIsTodoSelected={setIsTodoSelected}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}